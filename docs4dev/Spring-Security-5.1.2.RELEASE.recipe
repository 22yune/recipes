#!/usr/bin/env python
### -#*- coding:gbk -*-

from calibre.web.feeds.recipes import BasicNewsRecipe # 引入 Recipe 基础类

def prn_obj(obj):
    print '\n'.join(['%s:%s' % item for item in obj.__dict__.items()])

class Docs4dev(BasicNewsRecipe): # 继承 BasicNewsRecipe 类的新类名

    #///////////////////
    # 设置电子书元数据
    #///////////////////
    #title = 'Spring中文文档' # 电子书名
    #description = 'Spring中文文档' # 电子书简介
    #cover_url = '' # 电子书封面
    #masthead_url = '' # 页头图片
    __author__ = 'docs4dev' # 作者
    language = 'zh' # 语言
    #encoding = 'GBK' # 编码

    #///////////////////
    # 抓取页面内容设置
    #///////////////////
    #keep_only_tags = [{ 'class': 'example' }] # 仅保留指定选择器包含的内容
    no_stylesheets = True # 去除 CSS 样式
    remove_javascript = True # 去除 JavaScript 脚本
    auto_cleanup = True # 自动清理 HTML 代码
    #delay = 6 # 抓取页面间隔秒数
    max_articles_per_feed = 999 # 抓取文章数量

    def get_browser(self):
        br = BasicNewsRecipe.get_browser(self)
        br.set_cookie('SESSION','NWRjNGYzZmEtMThiMS00YTY3LWJkNjAtNDcyZWNjMDI1ODdm','')
        return br
    #///////////////////
    # 页面内容解析方法
    #///////////////////
    def parse_index(self):
        indexs = ['/docs/zh/spring-security/5.1.2.RELEASE/reference']
        ans = [] # 组成最终的数据结构
        for index in indexs :
            doc = self.parse_doc(index)
            ans = ans + doc
        return ans # 返回可供 Calibre 转换的数据结构

    def parse_doc(self,index):
        site = 'https://www.docs4dev.com' # 页面列表页
        #index = '/docs/zh/spring-framework/4.3.21.RELEASE/reference'
        soup = self.index_to_soup(site + index) # 解析列表页返回 BeautifulSoup 对象
        self.title = soup.find('title').contents[0].replace('|','-')
        print 'title'
        print soup.find('title').contents
        if self.title == None :
            return
        #print '==='
        #print soup.findAll(name="description")
        #print '==='
        #self.description = soup.findAll(name="description")['content']
        links = soup.findAll("li",{"class":["level1","level2","level3","level4"]}) # 获取所有文章链接
        ans = [] # 组成最终的数据结构
        doctitle = ''
        articles = [] # 定义空文章资源数组
        urls = []
        for link in links: # 循环处理所有文章链接
            if link.a.get("href") != None :
                if link['class'] == 'level1' or link['class'] == 'level2' :
                    print link['class']
                    #prn_obj(link.a)
                    #print link.a.contents
                    print('===')
                if link['class'] == 'level1' :
                    if len(articles) > 0 :
                        ans.append((doctitle, articles))
                    if len(link.a.contents) > 0 :
                        doctitle = link.a.contents[0].strip()
                        articles = []
                if len(link.a.contents) > 0 :
                    title = link.a.contents[0].strip() # 提取文章标题
                    url = site + link.a.get("href").split('#')[0] # 提取文章链接
                    if urls.count(url) == 0 :
                        urls.append(url)
                        print url
                    else :
                        url = ''
                    a = {'title': title , 'url':url, 'content' : ''} # 组合标题和链接
                    articles.append(a) # 累加到数组中
        if len(articles) > 0 :
            ans.append((doctitle, articles))
        print ans
        return ans # 返回可供 Calibre 转换的数据结构